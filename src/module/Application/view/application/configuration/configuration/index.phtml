<div class="container" id="configuration">
    <div class="row">
        <div class="col text-center headTitle">
            <h2>CONFIGURATION</h2>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <p>Le processus de SMILE est customisable, vous pouvez choisir quel rôle doit valider les étapes et les personnaliser.</p>
        </div>
        <div class="col">
            <!-- add button with a model -->
            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addStepModal">
                Ajouter
            </button>

        </div>
    </div>
    <div class="row">
        <div class="col">
            <table id="stepTable" class="table table-condensed table-hover table-smile">
                <thead>
                <tr>
                    <th>Code</th>
                    <th>Name</th>
<!--                    <th>Active</th>-->
                    <th>Validator</th>
                    <th>Order</th>
                    <th>Move</th>
                    <th>Action</th>
                </tr>
                </thead>
                <tbody>
                <tr>
                    <td></td>
                    <td></td>
<!--                    <td></td>-->
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                </tr>
                </tbody>
            </table>
         </div>
    </div>
    <div class="row">
        <div class="col">
            <form action="configuration/save" method="POST">
                <input type="hidden" id="inputValidator" name="data" value="" />
                <button id="saveSteps" type="submit" class="btn btn-success right">Save</button>
            </form>
        </div>
    </div>
</div>
<div class="modal modal-medium fade" id="addStepModal" tabindex="-1" aria-labelledby="addStepModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form method="POST" action="<?= $this->url('Configuration/add') ?>">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Ajouter une étape</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fermer"></button>
                </div>
                <div class="modal-body">
                    <div class="row mb-2">
                        <div class="col-auto">
                            <label for="stepCode" class="col-form-label">Code :</label>
                        </div>
                        <div class="col-auto">
                            <input type="text" name="stepCode" id="stepCode" class="form-control">
                        </div>
                    </div>
                    <div class="row mb-2">
                        <div class="col-auto">
                            <label for="stepName" class="col-form-label">Nom :</label>
                        </div>
                        <div class="col-auto">
                            <input type="text" name="stepName" id="stepName" class="form-control">
                        </div>
                    </div>
                    <div class="row mb-2">
                        <div class="col-auto">
                            <label for="stepValidator" class="col-form-label">Validateur :</label>
                        </div>
                        <div class="col-auto">
                            <select name="stepValidator" id="stepValidator" class="form-control selectValidator">
                                <?php foreach ($this->roles as $role) : ?>
                                    <option value="<?= $role->getId() ?>"><?= $role->getLibelle() ?></option>
                                <?php endforeach; ?>
                            </select>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fermer</button>
                    <button type="submit" class="btn btn-success">Ajouter</button>
                </div>
            </form>
        </div>
    </div>
</div>
<script>
    $(function () {
        let dataChange = []

        let QTable = $('#stepTable');

        let saveBtn = document.querySelector('#saveSteps')

        if (jQuery().dataTable) {
            let tableEl = QTable.DataTable({
                order: [[4, 'desc']],
                "responsive": true,
                "stateSave": true,
                "retrieve": true,
                "autoWidth": true,
                "processing": true,
                "paging": false,
                "searching": false,
                "ordering": false,
                "select": false,
                "columns": [
                    { "data": "code" },
                    { "data": "name" },
                    // { "data": "needValidation", "className": "text-center" },
                    { "data": "validator" },
                    { "data": "order", "className": "text-center" },
                    { "data": "move", "className": "text-center clickTD" },
                    { "data": "action", "className": "text-center" },
                ],
                "columnDefs": [

                    {
                        render: function (data, type, row) {
                            if(parseInt(data[3])) {
                                return `/`;
                            }else if(parseInt(data[2])) {
                                let up = '';
                                let down = '';
                                console.log(data)
                                if(!parseInt(data[5])) {
                                    up = (parseInt(data[0]) > 1) ? `<form action="configuration/changeOrder" method="POST"> <input type="hidden" name="direction" value="up" /><input type="hidden" name="code" value='${data[1]}' /> <button type="submit" name="changeOrder" style="all: unset; cursor: pointer;"> <i data-id='${data[1]}' data-type='up' class='fa-solid fa-arrow-up'></i></button></form>` : '';
                                }
                                if(!parseInt(data[4])) {
                                    down = (parseInt(data[0]) < parseInt(data[6])) ? `<form action="configuration/changeOrder" method="POST"> <input type="hidden" name="direction" value="down" /><input type="hidden" name="code" value='${data[1]}' /> <button type="submit" name="changeOrder" style="all: unset; cursor: pointer;"> <i data-id='${data[1]}' data-type='down' class='fa-solid fa-arrow-down'></i></button></form>` : '';
                                }
                                return `${up} ${down}`;
                            }
                            return ``;
                        },
                        targets: [4],
                    },
                    {
                        render: function (data, type, row) {
                            let str = ''
                            if(data[1]) {
                                str = `<form action="configuration/delete" method="POST">
                                        <input type="hidden" name="code" value='${data[0]}' />
                                        <button type="submit" name="delete" class="" style="all: unset; cursor: pointer;">
                                            <i class="fa-solid fa-trash" style="color: #e01b24;"></i>
                                        </button>
                                    </form>
                                   `
                            }
                            return str
                        },
                        targets: [5],
                    }
                ],
                "ajax": {
                    "url": "configuration/getData",
                    "type": "POST",
                    "dataSrc": function(json) {
                        return JSON.parse(json)
                    }
                },

            })
            // tableEl.ajax.reload()
            // tableEl
            //     .order( [ 1, 'asc' ] )
            //     .draw();
            //     <span data-order="${data[0]}" class='spanOrder spanOrder-${data[1]}'>${data[0]}</span>
            // <i data-id="${data[1]}" data-type="up" class="fa-solid fa-arrow-up changeOrder"></i>
            // <i data-id="${data[1]}" data-type="down" class="fa-solid fa-arrow-down changeOrder"></i>

            let spanOrder = []
            tableEl.on('init', () => {
                console.log('init')
                // let changerOrderList = document.querySelectorAll('.changeOrder')
                let clickTDList = document.querySelectorAll('.clickTD')
                let selectValidatorList = document.querySelectorAll('.selectValidator')
                // let checkStepList = document.querySelectorAll('.checkStep')

                spanOrder = document.querySelectorAll('.spanOrder')

                // checkStepList.forEach((el, key) => {
                //     el.addEventListener('change', changeValidationAPI)
                // })

                // changerOrderList.forEach((el, key) => {
                //     el.addEventListener('click', changeOrderAPI)
                // })

                selectValidatorList.forEach((el, key) => {
                    el.addEventListener('change', selectValidator)
                })

                clickTDList.forEach((el, key) => {
                    el.addEventListener('click', clickTDHandle)
                })

                tableEl.row().on('click', (a, b) => {

                })
            })

            function selectValidator(e) {
                // append the input hidden data with the data of the select
                let elem = e.target
                let elemValidator = document.querySelector('#inputValidator')
                if(elemValidator.value === '') {
                    elemValidator.value = '{}'
                }
                let data = JSON.parse(elemValidator.value)
                console.log(data)
                data[elem.dataset.code] = elem.value
                elemValidator.value = JSON.stringify(data)
            }

            function clickTDHandle(e) {
                let el = e.target
                // check if the element has a changeOrder class
                if(el.classList.contains('changeOrder')) {
                    changeOrderAPI(el)
                }
            }

            function changeOrderAPI(elem) {
                let type = elem.dataset.type
                let data = { data: elem.dataset.type }
                console.log(type, data)
                fetch('configuration/changeOrderAPI', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                })
                    .then((response) => {
                        return response.json()
                    })
                    .then((response) => {
                        console.log(response)
                    })
                    .catch((err) => {
                        console.log(err)
                    })
            }

            function changeValidationAPI(event) {

                let elem = event.target
                let type = elem.dataset.type
                let data = {
                    type: 'checkValidation',
                    code: event.target.dataset.code
                }
                changeOrder(elem)
                fetch('configuration/save', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                })
                    .then((response) => {
                        return response.json()
                    })
                    .then((response) => {
                        console.log(response)
                    })
                    .catch((err) => {
                        console.log(err)
                    })
            }

            function changeOrder(elem) {
                let type = elem.dataset.type
                let id = elem.dataset.id
                let elemClicked = document.querySelector('.spanOrder-'+id)
                let elemClickedO = parseInt(elemClicked.dataset.order)

                if ((type === 'up' && (elemClickedO < spanOrder.length)) || (type === 'down' && (elemClickedO > 1))) {
                    spanOrder.forEach((span) => {
                        let spanO = parseInt(span.dataset.order)
                        if(type === 'up' && (spanO === (elemClickedO+1))) {
                            span.dataset.order = (spanO-1)+''
                            span.innerHTML = span.dataset.order
                        }else if (type === 'down' && (spanO === (elemClickedO-1))) {
                            span.dataset.order = (spanO+1)+''
                            span.innerHTML = span.dataset.order
                        }
                    })

                    if(type === 'up') {
                        elemClicked.dataset.order = (elemClickedO+1)+''
                        elemClicked.innerHTML = elemClicked.dataset.order
                    }else {
                        elemClicked.dataset.order = (elemClickedO-1)+''
                        elemClicked.innerHTML = elemClicked.dataset.order
                    }
                }else {

                }


                // tableEl.row.add({
                //     'code': 'test',
                //     'name': 'test',
                //     'needValidation': 'alo',
                //     'validator': 'validator',
                //     'order': 'order'
                // }).draw().node()

                tableEl.ajax.reload()
                // tableEl.draw()
            }



            // saveBtn.addEventListener('click', () => {
            //     console.log('save')
            //     fetch('configuration/save',
            //         {
            //             method: 'POST',
            //             headers: {
            //             'Content-Type': 'application/json',
            //             },
            //             body: JSON.stringify(data)
            //         })
            //         .then((response) => {
            //             return response.json()
            //         })
            //         .then((response) => {
            //             console.log(response)
            //         })
            //         .catch((err) => {
            //             console.log(err)
            //         })
            // })

        }
    })
</script>